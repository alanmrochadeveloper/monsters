{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filterMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAEaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,YAEN,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCNTC,EAAW,SAACR,GAEvB,OADAS,QAAQC,IAAIV,GAEV,qBAAKC,UAAU,YAAf,SACGD,EAAMW,SAASC,KAAI,SAACT,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLdS,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEd,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC4BCG,E,kDA9Bd,aAAe,IAAD,8BACb,gBACKC,MAAQ,CACZR,SAAU,GACVS,YAAa,IAJD,E,qDAOd,WAAqB,IAAD,OACnBC,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEf,SAAUc,S,oBAE7C,WAAU,IAAD,SAC0BE,KAAKR,MAA/BR,EADA,EACAA,SAAUS,EADV,EACUA,YACZQ,EAAiBjB,EAASkB,QAAO,SAAC1B,GAAD,OACtCA,EAAQG,KAAKwB,cAAcC,SAASX,EAAYU,kBAEjD,OACC,sBAAK7B,UAAU,MAAf,UACC,0CACA,cAAC,EAAD,CACCa,YAAY,sBACZC,aAAc,SAACiB,GAAD,OAAO,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAE5D,cAAC,EAAD,CAAUvB,SAAUiB,W,GAzBNO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.479bca6c.chunk.js","sourcesContent":["import React from 'react'\nimport './card.style.css'\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      alt=\"monster\"\n    />\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n)\n","import React from 'react'\nimport './card-list.styles.css'\nimport { Card } from '../card/card.component'\nexport const CardList = (props) => {\n  console.log(props)\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\nimport './search-box.styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n)\n","import './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { Component } from 'react';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: '',\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((users) => this.setState({ monsters: users }));\n\t}\n\trender() {\n\t\tconst { monsters, searchField } = this.state;\n\t\tconst filterMonsters = monsters.filter((monster) =>\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t);\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<h1>Monsters</h1>\n\t\t\t\t<SearchBox\n\t\t\t\t\tplaceholder='search monsters now'\n\t\t\t\t\thandleChange={(e) => this.setState({ searchField: e.target.value })}\n\t\t\t\t/>\n\t\t\t\t<CardList monsters={filterMonsters} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}